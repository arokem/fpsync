#!/usr/bin/env python
"""syncme [options] [mode=sync]

Sync the current directory with a similarly named dir in a target location.

The mode argument must have a value in ('up','down','sync').  'up' or 'down'
are both destructive one-directional copies, which consider either the local
(up) or the remote (down) copy of the directory as a 'master', and delete
files on the receiver which are not present in the sender.  The 'sync' mode
synchronizes both directories to hold identical content, and for identically
named files, the newer one wins.

Note: this is just a thin wrapper around the dircopy utility.
"""

__author__  = 'Fernando Perez <fperez@colorado.edu>'
__version__ = '0.1'
__date__    = ''

#***************************************************************************
# Standard library modules
import getpass
import os
import subprocess
import sys

import argparse

#***************************************************************************

server_base_default_nfs = '~/bic'
# if this file is found in the nfs path, we assume NFS is up
nfs_up_sentinel = '.tcshrc'
# Otherwise, we default to an ssh channel:
server_base_default_ssh = 'longs.berkeley.edu:/home/fperez'


# Class and function definitions
class NotGiven: pass  # use to distinguish from None in default arguments

def system(cmd):
    if system.verbose:
        print('***CMD***', cmd)
    if not system.debug:
        subprocess.call(cmd, shell=True)

system.verbose = False
system.debug = False

    
def init():
    """Initialization and command-line processing.

    It creates the global names:
     - sysx: instance of SystemExec, can be used for system calls.
     - system: alias to sysx.system.

    Returns  options """

    # Names and default values for command-line options
    parser = argparse.ArgumentParser(usage=__doc__)
    newarg = parser.add_argument
    newarg('--dry-run', action='store_true',
           help='passed to rsync.')
    newarg('--debug', action='store_true',
           help='Print the system calls to be made without executing them.')
    newarg('--verbose', action='store_true',
           help='print all system calls to stdout.')
    newarg('--ssh', action='store_true',)
    newarg('--server-base', type=str,
           help='optional base for server directory')
    newarg('mode', choices=['up','down','sync'])
    
    # Process command line.
    opt = parser.parse_args()

    #print opt; sys.exit()  # dbg
 
    # Object to execute system calls
    system.verbose = opt.verbose
    system.debug = opt.debug

    return opt

def escape(s):
    return "'%s'" % s

def main():
    """Real logic goes here."""

    opt = init()
    mode = opt.mode

    server_base = opt.server_base
    if server_base is None:
        if not opt.ssh and \
               os.path.exists(os.path.join(server_base_default_nfs,
                                           nfs_up_sentinel)):
            server_base = server_base_default_nfs
        else:
            server_base = server_base_default_ssh

    user = getpass.getuser()
    cwd = os.getcwd()
    # let's get the part beyond ~ in cwd:
    source = cwd.split(user,1)[1]

    # Directories to sync
    dir_from = cwd
    dir_to   = server_base+source

    # Build the rsync command
    cmd = ['dircopy --nolog']
    if opt.dry_run: cmd.append('--dry-run')

    if mode=='down':
        # swap to/from
        dir_from,dir_to = dir_to,dir_from
    elif mode=='sync':
        cmd.append('--sync')
    elif mode!='up':
        raise ValueError,'invalid mode'
    cmd.extend([escape(dir_from+'/'),escape(dir_to)])
    cmd = ' '.join(cmd)

    #print cmd
    system(cmd)

if __name__ == '__main__': main()
#*********************** End of file <syncme> *************************
